const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const passport = require('passport');


// Load Validation 
const validateProfileInput = require('../../validation/profile');
const validateExperienceInput = require('../../validation/experience');
const validateEducationInput = require('../../validation/education');


// Load Profile model
const Profile = require('../../models/Profile');
// Load User Model
const User = require('../../models/User');

// @route  GET request to api/profile/rest
// @desc   Tests profile route
// @access Public
router.get('/test', (req,res) => res.json({msg: "Profile Works"}));

// @route  GET request to api/profile
// @desc   Get current users profile
// @access Private (protected route)
router.get('/', passport.authenticate('jwt', { session: false }), (req,res) => {
    const errors = {};
    
    Profile.findOne({ user: req.user.id })
    .populate('user', ['name', 'avatar'])  //creates user as an object with an id 
    .then(profile => {
        if(!profile) {
            errors.noprofile = 'There is no profile for this user';  //Creates errors as an array
            return res.status(404).json(errors);
        } 
        res.json(profile);
    })
    .catch(err => res.status(404).json(err));
});

// @route  GET api/profile/all  (this is a backend api route)
// @desc   Get all profiles
// @access Public (anyone can see profiles) 
router.get('/all', (req, res) => {
  const errors = {};
  
  Profile.find() 
  .populate('user', ['name', 'avatar'])
  .then(profiles => {
    if(!profiles) {
      errors.noprofile = "There are no profiles";
      return res.status(404).json();
    }
    
    res.json(profiles);
  })
  .catch(err => res.status(404).json({profile: 'There are no profiles'}));
});


// @route  GET api/profile/handle/:handle  (this is a backend api route)
// @desc   Get profile by handle 
// @access Public (anyone can see profiles) 

router.get('/handle/:handle', (req,res) => {
  const errors = {};
  
  Profile.findOne({ handle: req.params.handle })
  .populate('user', ['name', 'avatar'])
  .then(profile => {
    if(!profile) {
      errors.noprofile = 'There is no profile for this user';
      res.status(404).json(errors);
      
    }
    res.json(profile);
  })
  .catch(err => res.status(404).json(err));  //errors- the errors message that you manually want to pass. err: the error message generated by the sataus code
});

// @route  GET api/profile/user/:user_id
// @desc   Get profile by user ID
// @access Public 

router.get('/user/:user_id', (req,res) => {
  const errors = {};
  
  Profile.findOne({ user: req.params.user_id })
  .populate('user', ['name', 'avatar'])
  .then(profile => {
    if(!profile) {
      errors.noprofile = 'There is no profile for this user';
      res.status(404).json(errors);
      
    }
    res.json(profile);
  })
  .catch(err => res.status(404).json({profile: 'There is no profile for this user'}));  //errors- the errors message that you manually want to pass. err: the error message generated by the sataus code
});


// @route  POST request to api/profile
// @desc   Create  or Edit user profile
// @access Private (protected route)
router.post('/', passport.authenticate('jwt', { session: false }), (req,res) => {

  const { errors, isValid } = validateProfileInput(req.body);
  
  // Check Validation 
  if(!isValid) {
    // Return any errors with 400 status
    return res.status(400).json(errors);
  }
  
  // Get fields
  const profileFields = {};
  profileFields.user = req.user.id;
  if(req.body.handle) profileFields.handle = req.body.handle;  // Checking to see if handle was acutally sent in, if yes, it's set to handle.
  if(req.body.company) profileFields.company = req.body.company; 
  if(req.body.website) profileFields.website = req.body.website; 
  if(req.body.location) profileFields.location = req.body.location; 
  if(req.body.bio) profileFields.bio = req.body.bio; 
  if(req.body.status) profileFields.status = req.body.status; 
  if(req.body.githubusername) profileFields.githubusername = req.body.githubusername; 
  // Skills - Split into an array
  if(typeof req.body.skills !== 'undefined') {
    profileFields.skills = req.body.skills.split(','); // CSV field (comma seperated value)
  }
  
  // Social 
  profileFields.social = {};

  if(req.body.youtube) profileFields.social.youtube = req.body.youtube;
  if(req.body.twitter) profileFields.social.twitter = req.body.twitter;
  if(req.body.facebook) profileFields.social.facebook = req.body.facebook;
  if(req.body.linkedin) profileFields.social.linkedin = req.body.linkedin;
  if(req.body.instagram) profileFields.social.instagram = req.body.instagram;
  
  Profile.findOne({ user: req.user.id })
  .then(profile => {
    if(profile) {
      // Update profile if one already exists
      Profile.findOneAndUpdate({ user: req.user.id }, { $set: profileFields }, { new: true })
      .then(profile => res.json(profile));
    } else {
      // Create profile
      
      // Check to see if the handle exists 
      Profile.findOne({ handle: profileFields.handle }).then(profile => {
        if(profile) {
          errors.handle = 'That handle already exists';
          res.status(400).json(errors);
        }
        
        // Save profile
        new Profile(profileFields).save().then(profile => res.json(profile));
      });
    }
  })
});

// Experience Route
// @route  POST api/profile/experience
// @desc   Add experience to profile
// @access Private, because we need the user that is submitting the form 
router.post('/experience', passport.authenticate('jwt', {session: false }), (req, res) => {
  
   const { errors, isValid } = validateExperienceInput(req.body);
  
  // Check Validation 
  if(!isValid) {
    // Return any errors with 400 status
    return res.status(400).json(errors);
  }
  
  Profile.findOne({ user: req.user.id })
  .then(profile => {
    const newExp = {
      title: req.body.title,
      company: req.body.company,
      location: req.body.location,
      from: req.body.from, 
      to: req.body.to,
      currrent: req.body.current,
      description: req.body.description
    }
    
    // Add to experience array
    profile.experience.unshift(newExp);
    
    profile.save().then(profile => res.json(profile));
  })
});


// Education Route 
// @route  POST api/profile/education
// @desc   Add education to profile
// @access private

router.post('/education', passport.authenticate('jwt', {session: false }), (req, res) => {
  
   const { errors, isValid } = validateEducationInput(req.body);
  
  // Check Validation 
  if(!isValid) {
    // Return any errors with 400 status
    return res.status(400).json(errors);
  }
  
  Profile.findOne({ user: req.user.id })
  .then(profile => {
    const newEdu = {
      school: req.body.school,
      degree: req.body.degree,
      fieldofstudy: req.body.fieldofstudy,
      from: req.body.from, 
      to: req.body.to,
      currrent: req.body.current,
      description: req.body.description
    }
    
    // Add to experience array
    profile.education.unshift(newEdu);
    
    profile.save().then(profile => res.json(profile));
  })
});

// Delete
// @route  DELETE api/profile/experience/:exp_id
// @desc   Delete experience from profile
// @access private

router.delete('/experience/:exp_id', passport.authenticate('jwt', {session: false }), (req, res) => {
  
  Profile.findOne({ user: req.user.id })
  .then(profile => {
    //Get remove index
    const removeIndex = profile.experience
    .map(item => item.id)  //Maps an array to another
    .indexOf(req.params.exp_id);
    
    // Spliece out of array
    profile.experience.splice(removeIndex, 1);
    
    //Save
    profile.save().then(profile => res.json(profile));
  })
  .catch(err => res.status(404).json(err));
});

// Delete
// @route  DELETE api/profile/education/:edu_id
// @desc   Delete education from profile
// @access private

router.delete('/education/:edu_id', passport.authenticate('jwt', {session: false }), (req, res) => {
  
  Profile.findOne({ user: req.user.id })
  .then(profile => {
    //Get remove index
    const removeIndex = profile.education
    .map(item => item.id)  //Maps an array to another
    .indexOf(req.params.edu_id);
    
    // Spliece out of array
    profile.education.splice(removeIndex, 1);
    
    //Save
    profile.save().then(profile => res.json(profile));
  })
  .catch(err => res.status(404).json(err));
});


// Delete all
// @route  DELETE api/profile/
// @desc   Delete user and profile
// @access private

router.delete('/', passport.authenticate('jwt', {session: false }), (req, res) => {
  
 Profile.findOneAndRemove({ user: req.user.id })
  .then(() => {
    User.findOneAndRemove({ _id: req.user.id })
    .then(() => res.json({ success: true  }));
  })
}
);

module.exports = router;